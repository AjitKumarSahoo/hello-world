package Practice;

import java.util.Scanner;

/**
 * Author: Ajit Ku. Sahoo
 * Date: 10/16/2016
 *
 * Karl loves playing games on social networking sites. His current favorite is CandyMaker, where the goal is to make candies.
 * Karl just started level n, in which he must make n candies using m machines and w workers. In a single pass, he can make
 * m*w candies; after each pass, he can decide whether to spend some of his candies to buy more machines or hire more workers.
 * Buying a machine or hiring a worker costs p units of candies, and there is no limit to the number of machines he can
 * build or workers he can hire. Karl wants to maximize his score by making all n candies in a minimum number of passes.
 * Can you find and print the minimum number of passes required for Karl to make at least n units of candies?
 *
 * It doesn't pass all the test cases! :(
 */

public class CandyMakerHackerRank {

    public static void main(String[] args) {
        
        Scanner scanner = new Scanner(System.in);
        long m = scanner.nextLong();
        long w = scanner.nextLong();
        long p = scanner.nextLong();
        long n = scanner.nextLong();

        if (m <= 0 || w <= 0 || n <= 0 || p <= 0) {
            System.out.print(0);
        }

        long pass = 0;
        long candies = 0;
        long mw;
        long m1, w1, min;

        while (candies < n && candies >= 0) {

            pass++;
            mw = m * w;
            if (m >= n || w >= n || mw < 0 || candies + mw >= n) {
                break;
            }

            candies = candies + mw;
            if (candies <= 0 && candies < n)
                break;

            m1 = m;
            w1 = w;
            min = (long) Math.ceil((n-candies)/(double)mw); //additional passes required without buying any resource
            while (candies >= 0 && candies >= p) {
                candies -= p;
                if (m1 > w1) { //to maximize m*w, try to make |m-w| as minimum as possible
                    w1++;
                } else {
                    m1++;
                }
            }
            //if passes without buying is less than no. of passes with buying, then simply add the no. of passes and we are done.
            if (min < (long)Math.ceil((n-candies)/(double)(m1*w1))) { 
                pass += (long) ((n-candies)/(double)mw);
                break;
            }
            
            //else, continue as if you have bought as many resources as possible with currently earned candies
            m=m1;
            w=w1;

        }
        System.out.print(pass);
    }
}
