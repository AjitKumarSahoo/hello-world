package Practice;

/**
 * Author: Ajit Ku. Sahoo
 * Date: 10/13/2016
 */
public class BinaryTreeFromPreAndInOrder {

    private class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
    }

    private TreeNode buildTree(int[] preorder, int[] inorder) {

        if (preorder.length == 0 || inorder.length == 0 || preorder.length != inorder.length)
            return null;

        return buildTree(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }

    private TreeNode buildTree(int[] preorder, int preorder_start, int preorder_end, int[] inorder, int inorder_start,
                               int inorder_end) {
        if (inorder_start > inorder_end && preorder_start > preorder_end)
            return null;

        TreeNode root = new TreeNode(preorder[preorder_start]);
        int index = getIndexOfCurrRoot(root.val, inorder, inorder_start, inorder_end);

        root.left = buildTree(preorder, preorder_start + 1, preorder_start + (index - inorder_start), inorder, inorder_start, index - 1);
        root.right = buildTree(preorder, preorder_start + (index - inorder_start) + 1, preorder_end, inorder, index + 1, inorder_end);
        return root;
    }

    private int getIndexOfCurrRoot(int val, int[] inorder, int inorder_start, int inorder_end) {
        int index = inorder_start;
        for (; index <= inorder_end; index++) {
            if (inorder[index] == val)
                break;
        }
        return index;
    }

    public static void main(String[] args) {
        int[] preorder = new int[]{4,2,1,3,6,5,7};
        int[] inorder = new int[]{1,2,3,4,5,6,7};
        printInOrder(new BinaryTreeFromPreAndInOrder().buildTree(preorder, inorder));
    }

    private static void printInOrder(TreeNode root) {
        if (root == null)
            return;
        printInOrder(root.left);
        System.out.println(root.val);
        printInOrder(root.right);
    }
}
